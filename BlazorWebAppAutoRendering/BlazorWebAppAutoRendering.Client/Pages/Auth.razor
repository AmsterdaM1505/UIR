@page "/auth"
@rendermode InteractiveAuto
@using MudBlazor
@using MudBlazor.Services
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http

<style>
    .custom-border {
        border: 1px solid black;
        border-radius: 4px;
    }

    .custom-inputbox {
        border-bottom: 2px solid black;
    }

    .custom-grid {
        border: 1px solid black;
        border-radius: 4px;
        padding-right: 24px;
        padding-bottom: 24px;
    }
</style>

<MudGrid Class="pa-4">
    <MudItem xs="6" sm="3">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8"></MudPaper>
    </MudItem>
    <MudFlexBreak />
    <MudItem xs="6" sm="3">
        <MudPaper Class="d-flex align-center justify-center mud-width-full py-8"></MudPaper>
    </MudItem>
    <MudItem xs="12" sm="6" Class="custom-border; custom-grid">
        <h3>Авторизация</h3>
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                              Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" class="custom-inputbox" />
                <MudTextField T="string" Label="Password" @ref="pwField1"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Password is required!" class="custom-inputbox" />
                <div class="d-flex">
                    <MudRadioGroup T="string" Required="true" RequiredError="Account type is required!">
                        <MudRadio Value="@("Personal")">Personal</MudRadio>
                        <MudRadio Value="@("Professional")">Professional</MudRadio>
                    </MudRadioGroup>
                </div>
                <div class="d-flex align-center justify-space-between">
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)">Войти</MudButton>
                </div>
            </MudForm>
        </MudPaper>
    </MudItem>
    @* <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
            @foreach (var error in errors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem> *@
</MudGrid>

<h3>Список элементов</h3>

<input @bind="newItemName" placeholder="Название" />
<button @onclick="AddItem">Добавить</button>

<ul>
    @foreach (var item in items)
    {
        <li>
            @item.Name
            <button @onclick="() => DeleteItem(item.Id)">Удалить</button>
        </li>
    }
</ul>
@code {
    bool success;
    string[] errors = { };
    MudTextField<string> pwField1 = new MudTextField<string>();
    MudForm form = new MudForm();

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";
        return string.Empty;
    }

    List<Item> items = new();
    string newItemName = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadItems();
    }

    async Task LoadItems()
    {
        items = await Http.GetFromJsonAsync<List<Item>>("api/items") ?? new List<Item>(); ;
    }

    async Task AddItem()
    {
        if (string.IsNullOrWhiteSpace(newItemName)) return;

        var newItem = new Item { Name = newItemName };
        var response = await Http.PostAsJsonAsync("api/items", newItem);

        if (response.IsSuccessStatusCode)
        {
            newItemName = "";
            await LoadItems();
        }
    }

    async Task DeleteItem(int id)
    {
        var response = await Http.DeleteAsync($"api/items/{id}");
        if (response.IsSuccessStatusCode)
        {
            await LoadItems();
        }
    }

    public class Item
    {
        public int Id { get; set; } = 0;
        public string Name { get; set; } = string.Empty;
    }

}